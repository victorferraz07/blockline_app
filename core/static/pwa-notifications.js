// üîî Sistema de Notifica√ß√µes Push - Blockline PWA

class NotificationManager {
    constructor() {
        this.permission = Notification.permission;
        this.registration = null;
    }

    // Verificar se notifica√ß√µes s√£o suportadas
    isSupported() {
        return 'Notification' in window && 'serviceWorker' in navigator;
    }

    // Solicitar permiss√£o para notifica√ß√µes
    async requestPermission() {
        if (!this.isSupported()) {
            console.warn('‚ùå Notifica√ß√µes n√£o s√£o suportadas neste navegador');
            return false;
        }

        try {
            const permission = await Notification.requestPermission();
            this.permission = permission;

            if (permission === 'granted') {
                console.log('‚úÖ Permiss√£o de notifica√ß√µes concedida');
                return true;
            } else if (permission === 'denied') {
                console.warn('‚ùå Permiss√£o de notifica√ß√µes negada');
                return false;
            } else {
                console.warn('‚ö†Ô∏è Permiss√£o de notifica√ß√µes n√£o definida');
                return false;
            }
        } catch (error) {
            console.error('Erro ao solicitar permiss√£o:', error);
            return false;
        }
    }

    // Enviar notifica√ß√£o local
    async sendNotification(title, options = {}) {
        if (this.permission !== 'granted') {
            console.warn('‚ö†Ô∏è Permiss√£o necess√°ria para enviar notifica√ß√µes');
            return;
        }

        const defaultOptions = {
            icon: '/static/icons/icon-192.png',
            badge: '/static/icons/icon-192.png',
            vibrate: [200, 100, 200],
            tag: 'blockline-notification',
            requireInteraction: false,
        };

        const notificationOptions = { ...defaultOptions, ...options };

        try {
            // Se temos service worker registrado, usa ele
            if (this.registration) {
                await this.registration.showNotification(title, notificationOptions);
            } else {
                // Fallback para notifica√ß√£o local
                new Notification(title, notificationOptions);
            }

            console.log('üì¨ Notifica√ß√£o enviada:', title);
        } catch (error) {
            console.error('Erro ao enviar notifica√ß√£o:', error);
        }
    }

    // Configurar service worker para notifica√ß√µes
    async setupServiceWorker() {
        if (!('serviceWorker' in navigator)) {
            return;
        }

        try {
            this.registration = await navigator.serviceWorker.ready;
            console.log('‚úÖ Service Worker pronto para notifica√ß√µes');
        } catch (error) {
            console.error('Erro ao configurar Service Worker:', error);
        }
    }

    // Notifica√ß√µes espec√≠ficas do Blockline

    // Lembrete de bater ponto
    notifyPonto(tipo) {
        const messages = {
            entrada: {
                title: 'üü¢ Bom dia!',
                body: 'N√£o esque√ßa de registrar sua entrada',
            },
            saida: {
                title: 'üî¥ Hora de ir!',
                body: 'N√£o esque√ßa de registrar sua sa√≠da',
            },
            almoco: {
                title: 'üçΩÔ∏è Hora do almo√ßo',
                body: 'Bom apetite! Registre seu hor√°rio',
            }
        };

        const msg = messages[tipo] || messages.entrada;

        this.sendNotification(msg.title, {
            body: msg.body,
            icon: '/static/icons/icon-192.png',
            tag: 'ponto-reminder',
            requireInteraction: true,
            actions: [
                { action: 'open', title: 'Abrir Ponto' },
                { action: 'dismiss', title: 'Fechar' }
            ]
        });
    }

    // Alerta de estoque baixo
    notifyEstoqueBaixo(produto, quantidade) {
        this.sendNotification('‚ö†Ô∏è Estoque Baixo', {
            body: `${produto}: apenas ${quantidade} unidades restantes`,
            icon: '/static/icons/icon-192.png',
            tag: 'estoque-baixo',
            requireInteraction: true,
            vibrate: [300, 200, 300],
        });
    }

    // Nova tarefa no Kanban
    notifyNovaTarefa(tarefa) {
        this.sendNotification('üìå Nova Tarefa', {
            body: `Nova tarefa atribu√≠da: ${tarefa}`,
            icon: '/static/icons/icon-192.png',
            tag: 'nova-tarefa',
        });
    }

    // Expedi√ß√£o pendente
    notifyExpedicao(cliente) {
        this.sendNotification('üöö Expedi√ß√£o Pendente', {
            body: `Expedi√ß√£o para ${cliente} aguardando processamento`,
            icon: '/static/icons/icon-192.png',
            tag: 'expedicao-pendente',
        });
    }

    // Agendar notifica√ß√£o de lembrete de ponto
    schedulePointoReminders() {
        // Entrada: 7:55 (5min antes das 8h)
        this.scheduleNotificationAt(7, 55, () => {
            this.notifyPonto('entrada');
        });

        // Almo√ßo: 11:55
        this.scheduleNotificationAt(11, 55, () => {
            this.notifyPonto('almoco');
        });

        // Sa√≠da: 17:55 (sexta) ou 17:55 (segunda a quinta)
        const diaSemana = new Date().getDay();
        if (diaSemana === 5) { // Sexta
            this.scheduleNotificationAt(16, 55, () => {
                this.notifyPonto('saida');
            });
        } else if (diaSemana >= 1 && diaSemana <= 4) { // Seg-Qui
            this.scheduleNotificationAt(17, 55, () => {
                this.notifyPonto('saida');
            });
        }
    }

    // Agendar notifica√ß√£o para hor√°rio espec√≠fico
    scheduleNotificationAt(hour, minute, callback) {
        const now = new Date();
        const scheduled = new Date();
        scheduled.setHours(hour, minute, 0, 0);

        // Se o hor√°rio j√° passou hoje, agendar para amanh√£
        if (scheduled <= now) {
            scheduled.setDate(scheduled.getDate() + 1);
        }

        const timeUntil = scheduled - now;

        setTimeout(() => {
            callback();
            // Reagendar para o pr√≥ximo dia
            this.scheduleNotificationAt(hour, minute, callback);
        }, timeUntil);

        console.log(`‚è∞ Notifica√ß√£o agendada para ${scheduled.toLocaleString()}`);
    }
}

// Inst√¢ncia global
window.notificationManager = new NotificationManager();

// Inicializar quando o DOM carregar
document.addEventListener('DOMContentLoaded', async () => {
    if (window.notificationManager.isSupported()) {
        await window.notificationManager.setupServiceWorker();

        // Se j√° tem permiss√£o, configurar lembretes
        if (Notification.permission === 'granted') {
            window.notificationManager.schedulePointoReminders();
        }
    }
});

// Exportar para uso global
window.requestNotificationPermission = async () => {
    const granted = await window.notificationManager.requestPermission();
    if (granted) {
        window.notificationManager.schedulePointoReminders();
    }
    return granted;
};

window.sendNotification = (title, options) => {
    window.notificationManager.sendNotification(title, options);
};

console.log('üîî Sistema de notifica√ß√µes carregado');
